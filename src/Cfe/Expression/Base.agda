{-# OPTIONS --without-K --safe #-}

open import Function
open import Relation.Binary
import Relation.Binary.PropositionalEquality as โก

module Cfe.Expression.Base
  {c โ} (over : Setoid c โ)
  where

open Setoid over renaming (Carrier to C)

open import Cfe.Language over as ๐
open import Cfe.Language.Construct.Concatenate over renaming (_โ_ to _โโ_)
open import Cfe.Language.Construct.Single over
open import Cfe.Language.Construct.Union over
open import Cfe.Language.Indexed.Construct.Iterate over
open import Data.Fin as F hiding (_โค_; cast)
open import Data.Nat as โ hiding (_โค_; _โ_)
open import Data.Product
open import Data.Vec
open import Level renaming (suc to lsuc) hiding (Lift)
open import Relation.Binary.PropositionalEquality
open import Relation.Nullary

infix 10 _[_/_]
infix 7 _โ_
infix 6 _โจ_
infix 4 _โ_

data Expression : โ โ Set c where
  โฅ : โ {n} โ Expression n
  ฮต : โ {n} โ Expression n
  Char : โ {n} โ C โ Expression n
  _โจ_ : โ {n} โ Expression n โ Expression n โ Expression n
  _โ_ : โ {n} โ Expression n โ Expression n โ Expression n
  Var : โ {n} โ Fin n โ Expression n
  ฮผ : โ {n} โ Expression (suc n) โ Expression n

cast : โ {m n} โ .(_ : m โก n) โ Expression m โ Expression n
cast eq โฅ = โฅ
cast eq ฮต = ฮต
cast eq (Char x) = Char x
cast eq (eโ โจ eโ) = cast eq eโ โจ cast eq eโ
cast eq (eโ โ eโ) = cast eq eโ โ cast eq eโ
cast eq (Var i) = Var (F.cast eq i)
cast eq (ฮผ e) = ฮผ (cast (cong suc eq) e)

wkn : โ {n} โ Expression n โ Fin (suc n) โ Expression (suc n)
wkn โฅ i = โฅ
wkn ฮต i = ฮต
wkn (Char x) i = Char x
wkn (eโ โจ eโ) i = wkn eโ i โจ wkn eโ i
wkn (eโ โ eโ) i = wkn eโ i โ wkn eโ i
wkn (Var x) i = Var (punchIn i x)
wkn (ฮผ e) i = ฮผ (wkn e (suc i))

_[_/_] : โ {n} โ Expression (suc n) โ Expression n โ Fin (suc n) โ Expression n
โฅ [ eโฒ / i ] = โฅ
ฮต [ eโฒ / i ] = ฮต
Char x [ eโฒ / i ] = Char x
(eโ โจ eโ) [ eโฒ / i ] = eโ [ eโฒ / i ] โจ eโ [ eโฒ / i ]
(eโ โ eโ) [ eโฒ / i ] = eโ [ eโฒ / i ] โ eโ [ eโฒ / i ]
Var j [ eโฒ / i ] with i F.โ j
... | yes iโกj = eโฒ
... | no iโขj = Var (punchOut iโขj)
ฮผ e [ eโฒ / i ] = ฮผ (e [ wkn eโฒ F.zero / suc i ])

rotate : โ {n} โ Expression n โ (i j : Fin n) โ .(_ : i F.โค j) โ Expression n
rotate โฅ _ _ _ = โฅ
rotate ฮต _ _ _ = ฮต
rotate (Char x) _ _ _ = Char x
rotate (eโ โจ eโ) i j iโคj = rotate eโ i j iโคj โจ rotate eโ i j iโคj
rotate (eโ โ eโ) i j iโคj = rotate eโ i j iโคj โ rotate eโ i j iโคj
rotate {suc n} (Var k) i j _ with i F.โ k
... | yes iโกk = Var j
... | no iโขk = Var (punchIn j (punchOut iโขk))
rotate (ฮผ e) i j iโคj = ฮผ (rotate e (suc i) (suc j) (sโคs iโคj))

โฆ_โง : โ {n : โ} โ Expression n โ Vec (Language (c โ โ)) n โ Language (c โ โ)
โฆ โฅ โง _ = Lift (c โ โ) โ
โฆ ฮต โง _ = Lift โ ๏ฝฮต๏ฝ
โฆ Char x โง _ = Lift โ ๏ฝ x ๏ฝ
โฆ eโ โจ eโ โง ฮณ = โฆ eโ โง ฮณ โช โฆ eโ โง ฮณ
โฆ eโ โ eโ โง ฮณ = โฆ eโ โง ฮณ โโ โฆ eโ โง ฮณ
โฆ Var n โง ฮณ = lookup ฮณ n
โฆ ฮผ e โง ฮณ = โ (ฮป X โ โฆ e โง (X โท ฮณ))

_โ_ : {n : โ} โ Expression n โ Expression n โ Set (lsuc (c โ โ))
eโ โ eโ = โ ฮณ โ โฆ eโ โง ฮณ ๐.โ โฆ eโ โง ฮณ

rank : {n : โ} โ Expression n โ โ
rank โฅ = 0
rank ฮต = 0
rank (Char _) = 0
rank (eโ โจ eโ) = suc (rank eโ โ.+ rank eโ)
rank (eโ โ _) = suc (rank eโ)
rank (Var _) = 0
rank (ฮผ e) = suc (rank e)

infix 4 _<แตฃโโโ_

_<แตฃโโโ_ : โ {m n} โ REL (Expression m) (Expression n) _
e <แตฃโโโ eโฒ = rank e โ.< rank eโฒ
